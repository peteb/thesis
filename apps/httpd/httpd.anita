(#
 # $Id: httpd.anita 1522 2010-05-18 09:56:41Z ptr $
 # thorn-httpd
 #
 # (c) Copyright 2010 Peter Backman. All Rights Reserved. 
 #)

val hash_proto = object {
	val apply = fun(x) => {
		var i = 0;

		while (i < this.values.size) {
			val value = this.values.at(i);
			if (value(0) == x) {
				return value(1);
			}

			i = i + 1;
		}

		throw "key " + x.to_s + " not found";
	}
};

val create_hash = fun() => {
	object {
		val values = args;
		val delegate = this.hash_proto;
	}
};

val main = fun() => {
	val server_address = NET.address("0.0.0.0:8080");
	val server = NET.tcp_server(server_address);
	var client;
	
	while (client = server.accept) {       # loop forever, 'accept' creates new sockets
		spawn fun() => {                    # spawn new process for every client
			val client_address = client.peer_address;
			(this.to_s + ": " + client_address.to_s + " connected").puts;   
			
			val r = IO.each_line(client, fun(x) => LOBBY.execute_command(x, client), 1024);    
			
			client.close;
			
			(this.to_s + ": " + client_address.to_s + 
				" disconnected, '" + r.to_s + "'").puts;   
		}
	}
};


# parser
val execute_command = fun(line, client) => {
	if (line.empty?) {
		return null;
	}
	
	# ("Parse: " + line).puts;
	
	val tokens = line.split(" ");
	val handlers = this.create_hash(["GET", fun(a, b) => this.execute_GET(a, b)]);

	handlers(tokens.at(0))(tokens, client);	
};

val execute_GET = fun(tokens, client) => {
	val filename = tokens(1)(1..-1);

	try {
		("Opening file " + filename).puts;
		val file = IO.open_file(filename, "r");
		client.puts("HTTP/1.0 200 OK");
		client.puts("Content-Length: " + file.size.to_s);
		client.puts("");
		IO.write_buffered(file, client, 4096*50);
		file.close;
	}
	catch (e) {
		client.puts("HTTP/1.0 500 ERROR");
		client.puts("");
		client.puts("'" + filename + "': " + e.to_s);
	}
	
	client.close;
}
