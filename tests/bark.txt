; AST::Unit
;    AST::Vardef(foo)
;       AST::Closure
;          Formals:
;             AST::Vardef(x)
;                AST::Literal(null)
;             AST::Vardef(y)
;                AST::Literal(null)
;          Body:
;             AST::Block
;                AST::Literal(null)
;    AST::Vardef(main)
;       AST::Closure
;          Formals:
;             <none>
;          Body:
;             AST::Block
;                AST::MethodCall(foo)
;                   Target:
;                      AST::Var(THIS)
;                   Arguments:
;                      AST::Literal(1)
;                      AST::Literal(2)
; 
; ModuleID = 'fel.anita'

%callsite = type { i8*, i8*, i32* }
%fptr = type %ret (i8*, i8*, i8*)*
%ret = type { i8*, i8* }
%sym = type i32*

@__lobby_map = linkonce global i8* null           ; <i8**> [#uses=1]
@__sym_foo = weak global i32 0                    ; <i32*> [#uses=2]
@__sym_main = weak global i32 0                   ; <i32*> [#uses=1]

declare %ret @object_exec(i8*, i32*, i8*)

declare i8* @object_set_slot(i8*, i32*, i8*, i16)

declare i8* @object_get_slot(i8*, i32*)

declare %fptr @object_lookup_method(i8*, i32*)

declare i8* @object_create()

declare i8* @string_object(i8* noalias nocapture) readnone

declare i8* @int_object(i32) readnone

declare i8* @float_object(float) readnone

declare i8* @bool_object(i32) readnone

declare i8* @null_object() readnone

declare i8* @closure_object_place()

declare i8* @closure_object(%fptr)

declare i8* @closure_set_fptrC(i8*, %fptr)

declare i8* @array_get_elementC(i8*, i32)

declare i8* @array_set_elementC(i8*, i32, i8*)

declare i32 @bool_get_value(i8*) readnone

declare i8* @array_object(i32)

declare %ret @__t_throw(i8*)

declare i32 @__t_start(i32, i8*, i8*)

declare void @__t_init()

declare i8* @__t_spawn(i8*)

declare i8* @__t_send(i8*, i8*)

declare i8* @__t_clone(i8*)

declare i8* @__t_wrap_value(i8*)

declare void @__t_callsite(%callsite*, i32*, i8*)

declare %ret @__t_call(%callsite*, i8*)

define i32 @main(i32, i8*) nounwind {
entry:
  call void @__t_init()
  %2 = call i8* @object_create()                  ; <i8*> [#uses=4]
  %3 = call i8* @closure_object_place()           ; <i8*> [#uses=3]
  %4 = call i8* @closure_set_fptrC(i8* %3, %fptr @__closure) ; <i8*> [#uses=0]
  %foo = alloca i8*                               ; <i8**> [#uses=1]
  store i8* %3, i8** %foo
  %5 = call i8* @__t_wrap_value(i8* %3)           ; <i8*> [#uses=1]
  %6 = call i8* @object_set_slot(i8* %2, i32* @__sym_foo, i8* %5, i16 0) ; <i8*> [#uses=0]
  %7 = call i8* @closure_object_place()           ; <i8*> [#uses=3]
  %8 = call i8* @closure_set_fptrC(i8* %7, %fptr @__closure1) ; <i8*> [#uses=0]
  %main = alloca i8*                              ; <i8**> [#uses=1]
  store i8* %7, i8** %main
  %9 = call i8* @__t_wrap_value(i8* %7)           ; <i8*> [#uses=1]
  %10 = call i8* @object_set_slot(i8* %2, i32* @__sym_main, i8* %9, i16 0) ; <i8*> [#uses=0]
  store i8* %2, i8** @__lobby_map
  %11 = call i32 @__t_start(i32 %0, i8* %1, i8* %2) ; <i32> [#uses=1]
  ret i32 %11
}

define internal %ret @__closure(i8*, i8*, i8*) nounwind {
entry:
  %__retval = alloca %ret                         ; <%ret*> [#uses=3]
  %3 = call i8* @array_get_elementC(i8* %2, i32 0) ; <i8*> [#uses=1]
  %x = alloca i8*                                 ; <i8**> [#uses=1]
  store i8* %3, i8** %x
  %4 = call i8* @array_get_elementC(i8* %2, i32 1) ; <i8*> [#uses=1]
  %y = alloca i8*                                 ; <i8**> [#uses=1]
  store i8* %4, i8** %y
  br label %cache

cache:                                            ; preds = %entry
  br label %cont

cont:                                             ; preds = %cache
  %lit = call i8* @null_object()                  ; <i8*> [#uses=1]
  %5 = load %ret* %__retval                       ; <%ret> [#uses=1]
  %6 = insertvalue %ret %5, i8* %lit, 0           ; <%ret> [#uses=1]
  %7 = insertvalue %ret %6, i8* null, 1           ; <%ret> [#uses=1]
  store %ret %7, %ret* %__retval
  br label %ret

ret:                                              ; preds = %cont
  %8 = load %ret* %__retval                       ; <%ret> [#uses=1]
  ret %ret %8
}

define internal %ret @__closure1(i8*, i8*, i8*) nounwind {
entry:
  %__retval = alloca %ret                         ; <%ret*> [#uses=5]
  br label %cache

cache:                                            ; preds = %entry
  %3 = call i8* @array_object(i32 2)              ; <i8*> [#uses=3]
  %4 = alloca %callsite                           ; <%callsite*> [#uses=2]
  call void @__t_callsite(%callsite* %4, i32* @__sym_foo, i8* %3)
  br label %cont

cont:                                             ; preds = %cache
  %lit = call i8* @int_object(i32 1)              ; <i8*> [#uses=1]
  %5 = call i8* @array_set_elementC(i8* %3, i32 0, i8* %lit) ; <i8*> [#uses=0]
  %lit1 = call i8* @int_object(i32 2)             ; <i8*> [#uses=1]
  %6 = call i8* @array_set_elementC(i8* %3, i32 1, i8* %lit1) ; <i8*> [#uses=0]
  %7 = call %ret @__t_call(%callsite* %4, i8* %0) ; <%ret> [#uses=2]
  %retval = extractvalue %ret %7, 0               ; <i8*> [#uses=1]
  %excval = extractvalue %ret %7, 1               ; <i8*> [#uses=2]
  %8 = icmp eq i8* %excval, null                  ; <i1> [#uses=1]
  br i1 %8, label %cont2, label %forward

forward:                                          ; preds = %cont
  %9 = load %ret* %__retval                       ; <%ret> [#uses=1]
  %10 = insertvalue %ret %9, i8* null, 0          ; <%ret> [#uses=1]
  %11 = insertvalue %ret %10, i8* %excval, 1      ; <%ret> [#uses=1]
  store %ret %11, %ret* %__retval
  br label %ret

cont2:                                            ; preds = %cont
  %12 = load %ret* %__retval                      ; <%ret> [#uses=1]
  %13 = insertvalue %ret %12, i8* %retval, 0      ; <%ret> [#uses=1]
  %14 = insertvalue %ret %13, i8* null, 1         ; <%ret> [#uses=1]
  store %ret %14, %ret* %__retval
  br label %ret

ret:                                              ; preds = %cont2, %forward
  %15 = load %ret* %__retval                      ; <%ret> [#uses=1]
  ret %ret %15
}
