# Makefile.in generated by automake 1.10 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/thorn-llvm
pkglibdir = $(libdir)/thorn-llvm
pkgincludedir = $(includedir)/thorn-llvm
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = tlc$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_tlc_OBJECTS = main.$(OBJEXT) modgen.$(OBJEXT) json_parser.$(OBJEXT) \
	expression.$(OBJEXT) parser.$(OBJEXT) lexscope.$(OBJEXT) \
	lexentry.$(OBJEXT) undefdvars.$(OBJEXT) unit.$(OBJEXT) \
	vardef.$(OBJEXT) literal.$(OBJEXT) closure.$(OBJEXT) \
	var.$(OBJEXT) block.$(OBJEXT) methodcall.$(OBJEXT) \
	object.$(OBJEXT) if.$(OBJEXT) return.$(OBJEXT) \
	assignment.$(OBJEXT) while.$(OBJEXT) array.$(OBJEXT) \
	str_util.$(OBJEXT) count_assignments.$(OBJEXT) try.$(OBJEXT) \
	throw.$(OBJEXT) spawn.$(OBJEXT) send.$(OBJEXT) \
	builder.$(OBJEXT) const_precalc.$(OBJEXT) visitor.$(OBJEXT) \
	tree_printer.$(OBJEXT) json_value.$(OBJEXT) \
	json_reader.$(OBJEXT) json_writer.$(OBJEXT)
tlc_OBJECTS = $(am_tlc_OBJECTS)
tlc_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(tlc_SOURCES)
DIST_SOURCES = $(tlc_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run aclocal-1.10
AMTAR = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run tar
AUTOCONF = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run automake-1.10
AWK = awk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
GREP = /usr/bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = `$(top_srcdir)/llvm-config --ldflags \
            --libs backend core bitwriter asmparser`

LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/peter/Repositories/thorn-llvm/missing --run makeinfo
MKDIR_P = .././install-sh -c -d
OBJEXT = o
PACKAGE = thorn-llvm
PACKAGE_BUGREPORT = pete-bac at dsv.su.se
PACKAGE_NAME = thorn-llvm
PACKAGE_STRING = thorn-llvm 0.1
PACKAGE_TARNAME = thorn-llvm
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.1
abs_builddir = /Users/peter/Repositories/thorn-llvm/src
abs_srcdir = /Users/peter/Repositories/thorn-llvm/src
abs_top_builddir = /Users/peter/Repositories/thorn-llvm
abs_top_srcdir = /Users/peter/Repositories/thorn-llvm
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /Users/peter/Repositories/thorn-llvm/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(top_builddir)/./install-sh -c -d
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
EXTRA_DIST = ast stdlib libthorn
INCLUDES = -I$(top_srcdir)/jsoncpp/include
AM_CXXFLAGS = `$(top_srcdir)/llvm-config --cxxflags` -Wall -Wextra -Wno-unused-parameter \
              -Wno-overloaded-virtual

AM_LDFLAGS = -L/opt/local/lib
tlc_SOURCES = main.cpp modgen.cpp json_parser.cpp ast/expression.cpp 			\
			  ast/parser.cpp lexscope.cpp lexentry.cpp ast/undefdvars.cpp		\
			  ast/unit.cpp ast/vardef.cpp ast/literal.cpp ast/closure.cpp   \
			  ast/var.cpp ast/block.cpp	ast/methodcall.cpp ast/object.cpp	\
			  ast/if.cpp ast/return.cpp	ast/assignment.cpp ast/while.cpp		\
			  ast/array.cpp	str_util.cpp ast/count_assignments.cpp				\
			  ast/try.cpp ast/throw.cpp ast/spawn.cpp ast/send.cpp builder.cpp	\
			  ast/const_precalc.cpp ast/visitor.cpp ast/tree_printer.cpp         \
			  $(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp		\
			  $(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp	\
			  $(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
tlc$(EXEEXT): $(tlc_OBJECTS) $(tlc_DEPENDENCIES) 
	@rm -f tlc$(EXEEXT)
	$(CXXLINK) $(tlc_OBJECTS) $(tlc_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/array.Po
include ./$(DEPDIR)/assignment.Po
include ./$(DEPDIR)/block.Po
include ./$(DEPDIR)/builder.Po
include ./$(DEPDIR)/closure.Po
include ./$(DEPDIR)/const_precalc.Po
include ./$(DEPDIR)/count_assignments.Po
include ./$(DEPDIR)/expression.Po
include ./$(DEPDIR)/if.Po
include ./$(DEPDIR)/json_parser.Po
include ./$(DEPDIR)/json_reader.Po
include ./$(DEPDIR)/json_value.Po
include ./$(DEPDIR)/json_writer.Po
include ./$(DEPDIR)/lexentry.Po
include ./$(DEPDIR)/lexscope.Po
include ./$(DEPDIR)/literal.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/methodcall.Po
include ./$(DEPDIR)/modgen.Po
include ./$(DEPDIR)/object.Po
include ./$(DEPDIR)/parser.Po
include ./$(DEPDIR)/return.Po
include ./$(DEPDIR)/send.Po
include ./$(DEPDIR)/spawn.Po
include ./$(DEPDIR)/str_util.Po
include ./$(DEPDIR)/throw.Po
include ./$(DEPDIR)/tree_printer.Po
include ./$(DEPDIR)/try.Po
include ./$(DEPDIR)/undefdvars.Po
include ./$(DEPDIR)/unit.Po
include ./$(DEPDIR)/var.Po
include ./$(DEPDIR)/vardef.Po
include ./$(DEPDIR)/visitor.Po
include ./$(DEPDIR)/while.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

expression.o: ast/expression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expression.o -MD -MP -MF $(DEPDIR)/expression.Tpo -c -o expression.o `test -f 'ast/expression.cpp' || echo '$(srcdir)/'`ast/expression.cpp
	mv -f $(DEPDIR)/expression.Tpo $(DEPDIR)/expression.Po
#	source='ast/expression.cpp' object='expression.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expression.o `test -f 'ast/expression.cpp' || echo '$(srcdir)/'`ast/expression.cpp

expression.obj: ast/expression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT expression.obj -MD -MP -MF $(DEPDIR)/expression.Tpo -c -o expression.obj `if test -f 'ast/expression.cpp'; then $(CYGPATH_W) 'ast/expression.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/expression.cpp'; fi`
	mv -f $(DEPDIR)/expression.Tpo $(DEPDIR)/expression.Po
#	source='ast/expression.cpp' object='expression.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o expression.obj `if test -f 'ast/expression.cpp'; then $(CYGPATH_W) 'ast/expression.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/expression.cpp'; fi`

parser.o: ast/parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT parser.o -MD -MP -MF $(DEPDIR)/parser.Tpo -c -o parser.o `test -f 'ast/parser.cpp' || echo '$(srcdir)/'`ast/parser.cpp
	mv -f $(DEPDIR)/parser.Tpo $(DEPDIR)/parser.Po
#	source='ast/parser.cpp' object='parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o parser.o `test -f 'ast/parser.cpp' || echo '$(srcdir)/'`ast/parser.cpp

parser.obj: ast/parser.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT parser.obj -MD -MP -MF $(DEPDIR)/parser.Tpo -c -o parser.obj `if test -f 'ast/parser.cpp'; then $(CYGPATH_W) 'ast/parser.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/parser.cpp'; fi`
	mv -f $(DEPDIR)/parser.Tpo $(DEPDIR)/parser.Po
#	source='ast/parser.cpp' object='parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o parser.obj `if test -f 'ast/parser.cpp'; then $(CYGPATH_W) 'ast/parser.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/parser.cpp'; fi`

undefdvars.o: ast/undefdvars.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT undefdvars.o -MD -MP -MF $(DEPDIR)/undefdvars.Tpo -c -o undefdvars.o `test -f 'ast/undefdvars.cpp' || echo '$(srcdir)/'`ast/undefdvars.cpp
	mv -f $(DEPDIR)/undefdvars.Tpo $(DEPDIR)/undefdvars.Po
#	source='ast/undefdvars.cpp' object='undefdvars.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o undefdvars.o `test -f 'ast/undefdvars.cpp' || echo '$(srcdir)/'`ast/undefdvars.cpp

undefdvars.obj: ast/undefdvars.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT undefdvars.obj -MD -MP -MF $(DEPDIR)/undefdvars.Tpo -c -o undefdvars.obj `if test -f 'ast/undefdvars.cpp'; then $(CYGPATH_W) 'ast/undefdvars.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/undefdvars.cpp'; fi`
	mv -f $(DEPDIR)/undefdvars.Tpo $(DEPDIR)/undefdvars.Po
#	source='ast/undefdvars.cpp' object='undefdvars.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o undefdvars.obj `if test -f 'ast/undefdvars.cpp'; then $(CYGPATH_W) 'ast/undefdvars.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/undefdvars.cpp'; fi`

unit.o: ast/unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unit.o -MD -MP -MF $(DEPDIR)/unit.Tpo -c -o unit.o `test -f 'ast/unit.cpp' || echo '$(srcdir)/'`ast/unit.cpp
	mv -f $(DEPDIR)/unit.Tpo $(DEPDIR)/unit.Po
#	source='ast/unit.cpp' object='unit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unit.o `test -f 'ast/unit.cpp' || echo '$(srcdir)/'`ast/unit.cpp

unit.obj: ast/unit.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT unit.obj -MD -MP -MF $(DEPDIR)/unit.Tpo -c -o unit.obj `if test -f 'ast/unit.cpp'; then $(CYGPATH_W) 'ast/unit.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/unit.cpp'; fi`
	mv -f $(DEPDIR)/unit.Tpo $(DEPDIR)/unit.Po
#	source='ast/unit.cpp' object='unit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o unit.obj `if test -f 'ast/unit.cpp'; then $(CYGPATH_W) 'ast/unit.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/unit.cpp'; fi`

vardef.o: ast/vardef.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vardef.o -MD -MP -MF $(DEPDIR)/vardef.Tpo -c -o vardef.o `test -f 'ast/vardef.cpp' || echo '$(srcdir)/'`ast/vardef.cpp
	mv -f $(DEPDIR)/vardef.Tpo $(DEPDIR)/vardef.Po
#	source='ast/vardef.cpp' object='vardef.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vardef.o `test -f 'ast/vardef.cpp' || echo '$(srcdir)/'`ast/vardef.cpp

vardef.obj: ast/vardef.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vardef.obj -MD -MP -MF $(DEPDIR)/vardef.Tpo -c -o vardef.obj `if test -f 'ast/vardef.cpp'; then $(CYGPATH_W) 'ast/vardef.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/vardef.cpp'; fi`
	mv -f $(DEPDIR)/vardef.Tpo $(DEPDIR)/vardef.Po
#	source='ast/vardef.cpp' object='vardef.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vardef.obj `if test -f 'ast/vardef.cpp'; then $(CYGPATH_W) 'ast/vardef.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/vardef.cpp'; fi`

literal.o: ast/literal.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT literal.o -MD -MP -MF $(DEPDIR)/literal.Tpo -c -o literal.o `test -f 'ast/literal.cpp' || echo '$(srcdir)/'`ast/literal.cpp
	mv -f $(DEPDIR)/literal.Tpo $(DEPDIR)/literal.Po
#	source='ast/literal.cpp' object='literal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o literal.o `test -f 'ast/literal.cpp' || echo '$(srcdir)/'`ast/literal.cpp

literal.obj: ast/literal.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT literal.obj -MD -MP -MF $(DEPDIR)/literal.Tpo -c -o literal.obj `if test -f 'ast/literal.cpp'; then $(CYGPATH_W) 'ast/literal.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/literal.cpp'; fi`
	mv -f $(DEPDIR)/literal.Tpo $(DEPDIR)/literal.Po
#	source='ast/literal.cpp' object='literal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o literal.obj `if test -f 'ast/literal.cpp'; then $(CYGPATH_W) 'ast/literal.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/literal.cpp'; fi`

closure.o: ast/closure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT closure.o -MD -MP -MF $(DEPDIR)/closure.Tpo -c -o closure.o `test -f 'ast/closure.cpp' || echo '$(srcdir)/'`ast/closure.cpp
	mv -f $(DEPDIR)/closure.Tpo $(DEPDIR)/closure.Po
#	source='ast/closure.cpp' object='closure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o closure.o `test -f 'ast/closure.cpp' || echo '$(srcdir)/'`ast/closure.cpp

closure.obj: ast/closure.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT closure.obj -MD -MP -MF $(DEPDIR)/closure.Tpo -c -o closure.obj `if test -f 'ast/closure.cpp'; then $(CYGPATH_W) 'ast/closure.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/closure.cpp'; fi`
	mv -f $(DEPDIR)/closure.Tpo $(DEPDIR)/closure.Po
#	source='ast/closure.cpp' object='closure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o closure.obj `if test -f 'ast/closure.cpp'; then $(CYGPATH_W) 'ast/closure.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/closure.cpp'; fi`

var.o: ast/var.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT var.o -MD -MP -MF $(DEPDIR)/var.Tpo -c -o var.o `test -f 'ast/var.cpp' || echo '$(srcdir)/'`ast/var.cpp
	mv -f $(DEPDIR)/var.Tpo $(DEPDIR)/var.Po
#	source='ast/var.cpp' object='var.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o var.o `test -f 'ast/var.cpp' || echo '$(srcdir)/'`ast/var.cpp

var.obj: ast/var.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT var.obj -MD -MP -MF $(DEPDIR)/var.Tpo -c -o var.obj `if test -f 'ast/var.cpp'; then $(CYGPATH_W) 'ast/var.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/var.cpp'; fi`
	mv -f $(DEPDIR)/var.Tpo $(DEPDIR)/var.Po
#	source='ast/var.cpp' object='var.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o var.obj `if test -f 'ast/var.cpp'; then $(CYGPATH_W) 'ast/var.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/var.cpp'; fi`

block.o: ast/block.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT block.o -MD -MP -MF $(DEPDIR)/block.Tpo -c -o block.o `test -f 'ast/block.cpp' || echo '$(srcdir)/'`ast/block.cpp
	mv -f $(DEPDIR)/block.Tpo $(DEPDIR)/block.Po
#	source='ast/block.cpp' object='block.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o block.o `test -f 'ast/block.cpp' || echo '$(srcdir)/'`ast/block.cpp

block.obj: ast/block.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT block.obj -MD -MP -MF $(DEPDIR)/block.Tpo -c -o block.obj `if test -f 'ast/block.cpp'; then $(CYGPATH_W) 'ast/block.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/block.cpp'; fi`
	mv -f $(DEPDIR)/block.Tpo $(DEPDIR)/block.Po
#	source='ast/block.cpp' object='block.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o block.obj `if test -f 'ast/block.cpp'; then $(CYGPATH_W) 'ast/block.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/block.cpp'; fi`

methodcall.o: ast/methodcall.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT methodcall.o -MD -MP -MF $(DEPDIR)/methodcall.Tpo -c -o methodcall.o `test -f 'ast/methodcall.cpp' || echo '$(srcdir)/'`ast/methodcall.cpp
	mv -f $(DEPDIR)/methodcall.Tpo $(DEPDIR)/methodcall.Po
#	source='ast/methodcall.cpp' object='methodcall.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o methodcall.o `test -f 'ast/methodcall.cpp' || echo '$(srcdir)/'`ast/methodcall.cpp

methodcall.obj: ast/methodcall.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT methodcall.obj -MD -MP -MF $(DEPDIR)/methodcall.Tpo -c -o methodcall.obj `if test -f 'ast/methodcall.cpp'; then $(CYGPATH_W) 'ast/methodcall.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/methodcall.cpp'; fi`
	mv -f $(DEPDIR)/methodcall.Tpo $(DEPDIR)/methodcall.Po
#	source='ast/methodcall.cpp' object='methodcall.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o methodcall.obj `if test -f 'ast/methodcall.cpp'; then $(CYGPATH_W) 'ast/methodcall.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/methodcall.cpp'; fi`

object.o: ast/object.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT object.o -MD -MP -MF $(DEPDIR)/object.Tpo -c -o object.o `test -f 'ast/object.cpp' || echo '$(srcdir)/'`ast/object.cpp
	mv -f $(DEPDIR)/object.Tpo $(DEPDIR)/object.Po
#	source='ast/object.cpp' object='object.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o object.o `test -f 'ast/object.cpp' || echo '$(srcdir)/'`ast/object.cpp

object.obj: ast/object.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT object.obj -MD -MP -MF $(DEPDIR)/object.Tpo -c -o object.obj `if test -f 'ast/object.cpp'; then $(CYGPATH_W) 'ast/object.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/object.cpp'; fi`
	mv -f $(DEPDIR)/object.Tpo $(DEPDIR)/object.Po
#	source='ast/object.cpp' object='object.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o object.obj `if test -f 'ast/object.cpp'; then $(CYGPATH_W) 'ast/object.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/object.cpp'; fi`

if.o: ast/if.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT if.o -MD -MP -MF $(DEPDIR)/if.Tpo -c -o if.o `test -f 'ast/if.cpp' || echo '$(srcdir)/'`ast/if.cpp
	mv -f $(DEPDIR)/if.Tpo $(DEPDIR)/if.Po
#	source='ast/if.cpp' object='if.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o if.o `test -f 'ast/if.cpp' || echo '$(srcdir)/'`ast/if.cpp

if.obj: ast/if.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT if.obj -MD -MP -MF $(DEPDIR)/if.Tpo -c -o if.obj `if test -f 'ast/if.cpp'; then $(CYGPATH_W) 'ast/if.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/if.cpp'; fi`
	mv -f $(DEPDIR)/if.Tpo $(DEPDIR)/if.Po
#	source='ast/if.cpp' object='if.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o if.obj `if test -f 'ast/if.cpp'; then $(CYGPATH_W) 'ast/if.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/if.cpp'; fi`

return.o: ast/return.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT return.o -MD -MP -MF $(DEPDIR)/return.Tpo -c -o return.o `test -f 'ast/return.cpp' || echo '$(srcdir)/'`ast/return.cpp
	mv -f $(DEPDIR)/return.Tpo $(DEPDIR)/return.Po
#	source='ast/return.cpp' object='return.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o return.o `test -f 'ast/return.cpp' || echo '$(srcdir)/'`ast/return.cpp

return.obj: ast/return.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT return.obj -MD -MP -MF $(DEPDIR)/return.Tpo -c -o return.obj `if test -f 'ast/return.cpp'; then $(CYGPATH_W) 'ast/return.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/return.cpp'; fi`
	mv -f $(DEPDIR)/return.Tpo $(DEPDIR)/return.Po
#	source='ast/return.cpp' object='return.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o return.obj `if test -f 'ast/return.cpp'; then $(CYGPATH_W) 'ast/return.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/return.cpp'; fi`

assignment.o: ast/assignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT assignment.o -MD -MP -MF $(DEPDIR)/assignment.Tpo -c -o assignment.o `test -f 'ast/assignment.cpp' || echo '$(srcdir)/'`ast/assignment.cpp
	mv -f $(DEPDIR)/assignment.Tpo $(DEPDIR)/assignment.Po
#	source='ast/assignment.cpp' object='assignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o assignment.o `test -f 'ast/assignment.cpp' || echo '$(srcdir)/'`ast/assignment.cpp

assignment.obj: ast/assignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT assignment.obj -MD -MP -MF $(DEPDIR)/assignment.Tpo -c -o assignment.obj `if test -f 'ast/assignment.cpp'; then $(CYGPATH_W) 'ast/assignment.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/assignment.cpp'; fi`
	mv -f $(DEPDIR)/assignment.Tpo $(DEPDIR)/assignment.Po
#	source='ast/assignment.cpp' object='assignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o assignment.obj `if test -f 'ast/assignment.cpp'; then $(CYGPATH_W) 'ast/assignment.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/assignment.cpp'; fi`

while.o: ast/while.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT while.o -MD -MP -MF $(DEPDIR)/while.Tpo -c -o while.o `test -f 'ast/while.cpp' || echo '$(srcdir)/'`ast/while.cpp
	mv -f $(DEPDIR)/while.Tpo $(DEPDIR)/while.Po
#	source='ast/while.cpp' object='while.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o while.o `test -f 'ast/while.cpp' || echo '$(srcdir)/'`ast/while.cpp

while.obj: ast/while.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT while.obj -MD -MP -MF $(DEPDIR)/while.Tpo -c -o while.obj `if test -f 'ast/while.cpp'; then $(CYGPATH_W) 'ast/while.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/while.cpp'; fi`
	mv -f $(DEPDIR)/while.Tpo $(DEPDIR)/while.Po
#	source='ast/while.cpp' object='while.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o while.obj `if test -f 'ast/while.cpp'; then $(CYGPATH_W) 'ast/while.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/while.cpp'; fi`

array.o: ast/array.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT array.o -MD -MP -MF $(DEPDIR)/array.Tpo -c -o array.o `test -f 'ast/array.cpp' || echo '$(srcdir)/'`ast/array.cpp
	mv -f $(DEPDIR)/array.Tpo $(DEPDIR)/array.Po
#	source='ast/array.cpp' object='array.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o array.o `test -f 'ast/array.cpp' || echo '$(srcdir)/'`ast/array.cpp

array.obj: ast/array.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT array.obj -MD -MP -MF $(DEPDIR)/array.Tpo -c -o array.obj `if test -f 'ast/array.cpp'; then $(CYGPATH_W) 'ast/array.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/array.cpp'; fi`
	mv -f $(DEPDIR)/array.Tpo $(DEPDIR)/array.Po
#	source='ast/array.cpp' object='array.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o array.obj `if test -f 'ast/array.cpp'; then $(CYGPATH_W) 'ast/array.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/array.cpp'; fi`

count_assignments.o: ast/count_assignments.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT count_assignments.o -MD -MP -MF $(DEPDIR)/count_assignments.Tpo -c -o count_assignments.o `test -f 'ast/count_assignments.cpp' || echo '$(srcdir)/'`ast/count_assignments.cpp
	mv -f $(DEPDIR)/count_assignments.Tpo $(DEPDIR)/count_assignments.Po
#	source='ast/count_assignments.cpp' object='count_assignments.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o count_assignments.o `test -f 'ast/count_assignments.cpp' || echo '$(srcdir)/'`ast/count_assignments.cpp

count_assignments.obj: ast/count_assignments.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT count_assignments.obj -MD -MP -MF $(DEPDIR)/count_assignments.Tpo -c -o count_assignments.obj `if test -f 'ast/count_assignments.cpp'; then $(CYGPATH_W) 'ast/count_assignments.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/count_assignments.cpp'; fi`
	mv -f $(DEPDIR)/count_assignments.Tpo $(DEPDIR)/count_assignments.Po
#	source='ast/count_assignments.cpp' object='count_assignments.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o count_assignments.obj `if test -f 'ast/count_assignments.cpp'; then $(CYGPATH_W) 'ast/count_assignments.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/count_assignments.cpp'; fi`

try.o: ast/try.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT try.o -MD -MP -MF $(DEPDIR)/try.Tpo -c -o try.o `test -f 'ast/try.cpp' || echo '$(srcdir)/'`ast/try.cpp
	mv -f $(DEPDIR)/try.Tpo $(DEPDIR)/try.Po
#	source='ast/try.cpp' object='try.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o try.o `test -f 'ast/try.cpp' || echo '$(srcdir)/'`ast/try.cpp

try.obj: ast/try.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT try.obj -MD -MP -MF $(DEPDIR)/try.Tpo -c -o try.obj `if test -f 'ast/try.cpp'; then $(CYGPATH_W) 'ast/try.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/try.cpp'; fi`
	mv -f $(DEPDIR)/try.Tpo $(DEPDIR)/try.Po
#	source='ast/try.cpp' object='try.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o try.obj `if test -f 'ast/try.cpp'; then $(CYGPATH_W) 'ast/try.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/try.cpp'; fi`

throw.o: ast/throw.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT throw.o -MD -MP -MF $(DEPDIR)/throw.Tpo -c -o throw.o `test -f 'ast/throw.cpp' || echo '$(srcdir)/'`ast/throw.cpp
	mv -f $(DEPDIR)/throw.Tpo $(DEPDIR)/throw.Po
#	source='ast/throw.cpp' object='throw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o throw.o `test -f 'ast/throw.cpp' || echo '$(srcdir)/'`ast/throw.cpp

throw.obj: ast/throw.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT throw.obj -MD -MP -MF $(DEPDIR)/throw.Tpo -c -o throw.obj `if test -f 'ast/throw.cpp'; then $(CYGPATH_W) 'ast/throw.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/throw.cpp'; fi`
	mv -f $(DEPDIR)/throw.Tpo $(DEPDIR)/throw.Po
#	source='ast/throw.cpp' object='throw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o throw.obj `if test -f 'ast/throw.cpp'; then $(CYGPATH_W) 'ast/throw.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/throw.cpp'; fi`

spawn.o: ast/spawn.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spawn.o -MD -MP -MF $(DEPDIR)/spawn.Tpo -c -o spawn.o `test -f 'ast/spawn.cpp' || echo '$(srcdir)/'`ast/spawn.cpp
	mv -f $(DEPDIR)/spawn.Tpo $(DEPDIR)/spawn.Po
#	source='ast/spawn.cpp' object='spawn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spawn.o `test -f 'ast/spawn.cpp' || echo '$(srcdir)/'`ast/spawn.cpp

spawn.obj: ast/spawn.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spawn.obj -MD -MP -MF $(DEPDIR)/spawn.Tpo -c -o spawn.obj `if test -f 'ast/spawn.cpp'; then $(CYGPATH_W) 'ast/spawn.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/spawn.cpp'; fi`
	mv -f $(DEPDIR)/spawn.Tpo $(DEPDIR)/spawn.Po
#	source='ast/spawn.cpp' object='spawn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spawn.obj `if test -f 'ast/spawn.cpp'; then $(CYGPATH_W) 'ast/spawn.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/spawn.cpp'; fi`

send.o: ast/send.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT send.o -MD -MP -MF $(DEPDIR)/send.Tpo -c -o send.o `test -f 'ast/send.cpp' || echo '$(srcdir)/'`ast/send.cpp
	mv -f $(DEPDIR)/send.Tpo $(DEPDIR)/send.Po
#	source='ast/send.cpp' object='send.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o send.o `test -f 'ast/send.cpp' || echo '$(srcdir)/'`ast/send.cpp

send.obj: ast/send.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT send.obj -MD -MP -MF $(DEPDIR)/send.Tpo -c -o send.obj `if test -f 'ast/send.cpp'; then $(CYGPATH_W) 'ast/send.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/send.cpp'; fi`
	mv -f $(DEPDIR)/send.Tpo $(DEPDIR)/send.Po
#	source='ast/send.cpp' object='send.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o send.obj `if test -f 'ast/send.cpp'; then $(CYGPATH_W) 'ast/send.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/send.cpp'; fi`

const_precalc.o: ast/const_precalc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT const_precalc.o -MD -MP -MF $(DEPDIR)/const_precalc.Tpo -c -o const_precalc.o `test -f 'ast/const_precalc.cpp' || echo '$(srcdir)/'`ast/const_precalc.cpp
	mv -f $(DEPDIR)/const_precalc.Tpo $(DEPDIR)/const_precalc.Po
#	source='ast/const_precalc.cpp' object='const_precalc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o const_precalc.o `test -f 'ast/const_precalc.cpp' || echo '$(srcdir)/'`ast/const_precalc.cpp

const_precalc.obj: ast/const_precalc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT const_precalc.obj -MD -MP -MF $(DEPDIR)/const_precalc.Tpo -c -o const_precalc.obj `if test -f 'ast/const_precalc.cpp'; then $(CYGPATH_W) 'ast/const_precalc.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/const_precalc.cpp'; fi`
	mv -f $(DEPDIR)/const_precalc.Tpo $(DEPDIR)/const_precalc.Po
#	source='ast/const_precalc.cpp' object='const_precalc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o const_precalc.obj `if test -f 'ast/const_precalc.cpp'; then $(CYGPATH_W) 'ast/const_precalc.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/const_precalc.cpp'; fi`

visitor.o: ast/visitor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT visitor.o -MD -MP -MF $(DEPDIR)/visitor.Tpo -c -o visitor.o `test -f 'ast/visitor.cpp' || echo '$(srcdir)/'`ast/visitor.cpp
	mv -f $(DEPDIR)/visitor.Tpo $(DEPDIR)/visitor.Po
#	source='ast/visitor.cpp' object='visitor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o visitor.o `test -f 'ast/visitor.cpp' || echo '$(srcdir)/'`ast/visitor.cpp

visitor.obj: ast/visitor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT visitor.obj -MD -MP -MF $(DEPDIR)/visitor.Tpo -c -o visitor.obj `if test -f 'ast/visitor.cpp'; then $(CYGPATH_W) 'ast/visitor.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/visitor.cpp'; fi`
	mv -f $(DEPDIR)/visitor.Tpo $(DEPDIR)/visitor.Po
#	source='ast/visitor.cpp' object='visitor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o visitor.obj `if test -f 'ast/visitor.cpp'; then $(CYGPATH_W) 'ast/visitor.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/visitor.cpp'; fi`

tree_printer.o: ast/tree_printer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tree_printer.o -MD -MP -MF $(DEPDIR)/tree_printer.Tpo -c -o tree_printer.o `test -f 'ast/tree_printer.cpp' || echo '$(srcdir)/'`ast/tree_printer.cpp
	mv -f $(DEPDIR)/tree_printer.Tpo $(DEPDIR)/tree_printer.Po
#	source='ast/tree_printer.cpp' object='tree_printer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tree_printer.o `test -f 'ast/tree_printer.cpp' || echo '$(srcdir)/'`ast/tree_printer.cpp

tree_printer.obj: ast/tree_printer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT tree_printer.obj -MD -MP -MF $(DEPDIR)/tree_printer.Tpo -c -o tree_printer.obj `if test -f 'ast/tree_printer.cpp'; then $(CYGPATH_W) 'ast/tree_printer.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/tree_printer.cpp'; fi`
	mv -f $(DEPDIR)/tree_printer.Tpo $(DEPDIR)/tree_printer.Po
#	source='ast/tree_printer.cpp' object='tree_printer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o tree_printer.obj `if test -f 'ast/tree_printer.cpp'; then $(CYGPATH_W) 'ast/tree_printer.cpp'; else $(CYGPATH_W) '$(srcdir)/ast/tree_printer.cpp'; fi`

json_value.o: $(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_value.o -MD -MP -MF $(DEPDIR)/json_value.Tpo -c -o json_value.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp
	mv -f $(DEPDIR)/json_value.Tpo $(DEPDIR)/json_value.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp' object='json_value.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_value.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp

json_value.obj: $(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_value.obj -MD -MP -MF $(DEPDIR)/json_value.Tpo -c -o json_value.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; fi`
	mv -f $(DEPDIR)/json_value.Tpo $(DEPDIR)/json_value.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp' object='json_value.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_value.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_value.cpp'; fi`

json_reader.o: $(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_reader.o -MD -MP -MF $(DEPDIR)/json_reader.Tpo -c -o json_reader.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp
	mv -f $(DEPDIR)/json_reader.Tpo $(DEPDIR)/json_reader.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp' object='json_reader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_reader.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp

json_reader.obj: $(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_reader.obj -MD -MP -MF $(DEPDIR)/json_reader.Tpo -c -o json_reader.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; fi`
	mv -f $(DEPDIR)/json_reader.Tpo $(DEPDIR)/json_reader.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp' object='json_reader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_reader.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_reader.cpp'; fi`

json_writer.o: $(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_writer.o -MD -MP -MF $(DEPDIR)/json_writer.Tpo -c -o json_writer.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp
	mv -f $(DEPDIR)/json_writer.Tpo $(DEPDIR)/json_writer.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp' object='json_writer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_writer.o `test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp' || echo '$(srcdir)/'`$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp

json_writer.obj: $(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT json_writer.obj -MD -MP -MF $(DEPDIR)/json_writer.Tpo -c -o json_writer.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; fi`
	mv -f $(DEPDIR)/json_writer.Tpo $(DEPDIR)/json_writer.Po
#	source='$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp' object='json_writer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o json_writer.obj `if test -f '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; then $(CYGPATH_W) '$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/jsoncpp/src/lib_json/json_writer.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


#tlc_LDADD = -lboost_program_options-mt
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
